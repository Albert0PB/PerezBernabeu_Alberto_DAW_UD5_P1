{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ejercicios de Git y GitHub Ejercicios de Git y GitHub (I) Creaci\u00f3n del repositorio y primer commit Para la realizaci\u00f3n de esta pr\u00e1ctica se ha creado un repositorio remoto en GitHub: Tambi\u00e9n es necesario inicializar un repositorio en local, indicando la URL (en mi caso uso el enlace SSH) del repositorio remoto como \"origen\" y renombrando la rama \"master\" a \"main\": A continuaci\u00f3n, se realizar\u00e1 un primer commit sencillo en el que se subir\u00e1 un archivo 'README.md' a la rama 'main' del repositorio remoto: Ignorar archivos En ocasiones tendremos en nuestro repositorio local archivos y/o directorios que no queremos a\u00f1adir a un commit (por ejemplo, archivos que guarden variables de entorno). Para mostrar c\u00f3mo ignorar archivos, se crear\u00e1n un archivo y un directorio de ejemplo: Y para ignorarlos (por ejemplo si ejecut\u00e1semos 'git add .'), creamos un archivo '.gitignore' con el siguiente contenido: privada privada/* privado.txt Tags Crearemos un nuevo archivo '1.txt' y asignaremos un tag al commit antes de subir los cambios al repositorio remoto: Cuenta de GitHub GitHub permite personalizar el perfil de la cuenta (Settings > Public profile). Por ejemplo, podemos poner una foto de perfil: Tambi\u00e9n es posible mejorar la seguridad de la cuenta activando la autenticaci\u00f3n de dos factores (en mi caso, tengo activada la 2FA con la aplicaci\u00f3n de autenticaci\u00f3n de Google): Uso social de GitHub A trav\u00e9s de GitHub podemos visitar las cuentas de otras personas. Voy a seguir a dos de mis compa\u00f1eros de clase: Tambi\u00e9n crear\u00e9 una tabla con informaci\u00f3n de algunos de mis compa\u00f1eros en el fichero README.md del repositorio DEAW: Gesti\u00f3n de rama v0.2 Creaci\u00f3n de la rama Creamos una rama con nombre 'v0.2', nos posicionamos sobre ella, creamos un fichero y subimos los cambios al repositorio remoto: Merge directo Podemos fusionar el contenido de la rama 'main' con el contenido de 'v0.2'. Como los archivos que comparten las dos ramas tienen el mismo contenido, simplemente se a\u00f1adir\u00e1 el archivo '2.txt' de 'v0.2' a 'main': Merge conflictivo Si quisi\u00e9ramos realizar una fusi\u00f3n de ramas pero alguno de los archivos tuviera diferente contenido en cada rama, tendr\u00edamos que resolver el conflicto para que la fusi\u00f3n pueda realizarse. Por ejemplo, escribir\u00e9 \"Hola\" en el '1.txt' de 'main' y \"Adi\u00f3s\" en el mismo archivo pero en la rama 'v0.2': Al intentar fusionar las ramas saltar\u00e1 un aviso debido al conflicto en el contenido del archivo en las diferentes ramas: Si abrimos el archivo con un editor de texto se nos mostrar\u00e1 el contenido de ambas ramas: Resolvemos el conflicto de contenido y confirmamos los cambios con un 'commit'. Borrar rama Creamos un tag 'v0.2' y borramos la rama con el mismo nombre: Listar cambios Para ver el historial de cambios utilizamos 'git log': Ejercicios de Git y GitHub (II) Creaci\u00f3n y actualizaci\u00f3n de repositorios Ejercicio 1 Para definir el nombre de usuario, email y activar el coloreado de salida ejecutamos: Para mostrar la configuraci\u00f3n ejecutamos: Ejercicio 2 Creamos un nuevo repositorio y mostramos su contenido: Ejercicio 3 Comprobamos el estado del repositorio, creamos un fichero 'indice.txt' y comprobamos de nuevo el estado del repositorio: A\u00f1adimos el fichero a la zona de 'stage' y volvemos a comprobar el estado del repositorio: Ejercicio 4 Confirmamos los cambios y volvemos a comprobar el estado del repositorio: Ejercicio 5 Modificamos 'indice.txt', mostramos los cambios con respecto a los cambios confirmados anteriormente y confirmamos la nueva versi\u00f3n del archivo: Ejercicio 6 Ahora mostraremos los cambios sobre la \u00faltima versi\u00f3n del repositorio al completo. Despu\u00e9s modificamos el mensaje de la \u00faltima confirmaci\u00f3n y veremos la \u00faltima modificaci\u00f3n realizada en el repositorio: Manejo del historial de cambios Ejercicio 1 Mostramos el historial de cambios: A\u00f1adimos un nuevo directorio y archivo, movemos el nuevo contenido a la zona de 'stage' y confirmamos los cambios: Volvemos a mostrar el historial de cambios: Ejercicio 2 A\u00f1adimos un nuevo cap\u00edtulo y mostramos las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores: Ejercicio 3 A\u00f1adimos un nuevo cap\u00edtulo y mostramos las diferencias entre la primera y \u00faltima versi\u00f3n del repositorio: Ejercicio 4 Modificamos el archivo 'indice.txt', confirmamos los cambios y mostramos qui\u00e9n ha realizado los cambios sobre el fichero: Deshacer cambios Ejercicio 1 Modificamos 'indice.txt' eliminando contenido y comprobamos el estado del repositorio. Despu\u00e9s deshacemos los cambios y volvemos a comprobar el estado del repositorio: Ejercicio 2 Volvemos a modificar 'indice.txt', a\u00f1adimos los cambios a la zona de 'stage' y comprobamos el estado del repositorio. Despu\u00e9s quitaremos los cambios de la zona de 'stage' y volvemos a comprobar el estado del repositorio. Por \u00faltimo, deshacemos los cambios y comprobamos el estado del repositorio: Ejercicio 3 En primer lugar: Eliminamos la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminamos el fichero capitulos/capitulo3.txt. A\u00f1adir un fichero nuevo capitulos/capitulo4.txt vac\u00edo. A\u00f1adir los cambios a la zona de intercambio temporal. Tras los cambios, comprobamos el estado del repositorio. Despu\u00e9s quitaremos los cambios de la zona de 'stage' y comprobamos el estado. Por \u00faltimo, deshacemos todos los cambios y comprobamos el estado por \u00faltima vez: Ejercicio 4 En primer lugar: Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d Comprobar el historial del repositorio. Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal. En segundo lugar: Comprobar el historial y el estado del repositorio. Volver a hacer el commit con el mismo mensaje de antes. Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio. Comprobar de nuevo el historial y el estado del repositorio. Gesti\u00f3n de ramas Ejercicio 1 Creamos una nueva rama y mostramos todas las ramas del repositorio: Ejercicio 2 Creamos 'capitulos/capitulo4.txt', confirmamos los cambios y mostramos el historial de todas las ramas: Ejercicio 3 Nos movemos a la rama 'bibliografia', creamos un archivo de texto con el miso nombre y confirmamos los cambios, luego mostramos el historial con todas las ramas: Ejercicio 4 Fusionamos 'bibliografia' con 'main', mostramos el historial, eliminamos 'bibliografia' y volvemos a mostrar el historial: Ejercicio 5 Creamos una nueva rama 'bibliografia', modificamos 'bibliografia.txt' y confirmamos los cambios. Modificamos el mismo archivo en la rama 'main', los confirmamos y fusionamos las ramas resolviendo el conflicto en el fichero: Mostramos el historial del repositorio: Repositorios remotos Ejercicio 1 Creamos un nuevo repositorio en GitHub 'libro-git': Lo a\u00f1adimos al repositorio local y mostramos los repositorios remotos: Ejercicio 2 Subimos los cambios al repositorio remoto con: git push origin main Comprobamos el historial de versiones del repositorio remoto:","title":"Ejercicios de Git y GitHub"},{"location":"#ejercicios-de-git-y-github","text":"","title":"Ejercicios de Git y GitHub"},{"location":"#ejercicios-de-git-y-github-i","text":"","title":"Ejercicios de Git y GitHub (I)"},{"location":"#creacion-del-repositorio-y-primer-commit","text":"Para la realizaci\u00f3n de esta pr\u00e1ctica se ha creado un repositorio remoto en GitHub: Tambi\u00e9n es necesario inicializar un repositorio en local, indicando la URL (en mi caso uso el enlace SSH) del repositorio remoto como \"origen\" y renombrando la rama \"master\" a \"main\": A continuaci\u00f3n, se realizar\u00e1 un primer commit sencillo en el que se subir\u00e1 un archivo 'README.md' a la rama 'main' del repositorio remoto:","title":"Creaci\u00f3n del repositorio y primer commit"},{"location":"#ignorar-archivos","text":"En ocasiones tendremos en nuestro repositorio local archivos y/o directorios que no queremos a\u00f1adir a un commit (por ejemplo, archivos que guarden variables de entorno). Para mostrar c\u00f3mo ignorar archivos, se crear\u00e1n un archivo y un directorio de ejemplo: Y para ignorarlos (por ejemplo si ejecut\u00e1semos 'git add .'), creamos un archivo '.gitignore' con el siguiente contenido: privada privada/* privado.txt","title":"Ignorar archivos"},{"location":"#tags","text":"Crearemos un nuevo archivo '1.txt' y asignaremos un tag al commit antes de subir los cambios al repositorio remoto:","title":"Tags"},{"location":"#cuenta-de-github","text":"GitHub permite personalizar el perfil de la cuenta (Settings > Public profile). Por ejemplo, podemos poner una foto de perfil: Tambi\u00e9n es posible mejorar la seguridad de la cuenta activando la autenticaci\u00f3n de dos factores (en mi caso, tengo activada la 2FA con la aplicaci\u00f3n de autenticaci\u00f3n de Google):","title":"Cuenta de GitHub"},{"location":"#uso-social-de-github","text":"A trav\u00e9s de GitHub podemos visitar las cuentas de otras personas. Voy a seguir a dos de mis compa\u00f1eros de clase: Tambi\u00e9n crear\u00e9 una tabla con informaci\u00f3n de algunos de mis compa\u00f1eros en el fichero README.md del repositorio DEAW:","title":"Uso social de GitHub"},{"location":"#gestion-de-rama-v02","text":"","title":"Gesti\u00f3n de rama v0.2"},{"location":"#creacion-de-la-rama","text":"Creamos una rama con nombre 'v0.2', nos posicionamos sobre ella, creamos un fichero y subimos los cambios al repositorio remoto:","title":"Creaci\u00f3n de la rama"},{"location":"#merge-directo","text":"Podemos fusionar el contenido de la rama 'main' con el contenido de 'v0.2'. Como los archivos que comparten las dos ramas tienen el mismo contenido, simplemente se a\u00f1adir\u00e1 el archivo '2.txt' de 'v0.2' a 'main':","title":"Merge directo"},{"location":"#merge-conflictivo","text":"Si quisi\u00e9ramos realizar una fusi\u00f3n de ramas pero alguno de los archivos tuviera diferente contenido en cada rama, tendr\u00edamos que resolver el conflicto para que la fusi\u00f3n pueda realizarse. Por ejemplo, escribir\u00e9 \"Hola\" en el '1.txt' de 'main' y \"Adi\u00f3s\" en el mismo archivo pero en la rama 'v0.2': Al intentar fusionar las ramas saltar\u00e1 un aviso debido al conflicto en el contenido del archivo en las diferentes ramas: Si abrimos el archivo con un editor de texto se nos mostrar\u00e1 el contenido de ambas ramas: Resolvemos el conflicto de contenido y confirmamos los cambios con un 'commit'.","title":"Merge conflictivo"},{"location":"#borrar-rama","text":"Creamos un tag 'v0.2' y borramos la rama con el mismo nombre:","title":"Borrar rama"},{"location":"#listar-cambios","text":"Para ver el historial de cambios utilizamos 'git log':","title":"Listar cambios"},{"location":"#ejercicios-de-git-y-github-ii","text":"","title":"Ejercicios de Git y GitHub (II)"},{"location":"#creacion-y-actualizacion-de-repositorios","text":"","title":"Creaci\u00f3n y actualizaci\u00f3n de repositorios"},{"location":"#ejercicio-1","text":"Para definir el nombre de usuario, email y activar el coloreado de salida ejecutamos: Para mostrar la configuraci\u00f3n ejecutamos:","title":"Ejercicio 1"},{"location":"#ejercicio-2","text":"Creamos un nuevo repositorio y mostramos su contenido:","title":"Ejercicio 2"},{"location":"#ejercicio-3","text":"Comprobamos el estado del repositorio, creamos un fichero 'indice.txt' y comprobamos de nuevo el estado del repositorio: A\u00f1adimos el fichero a la zona de 'stage' y volvemos a comprobar el estado del repositorio:","title":"Ejercicio 3"},{"location":"#ejercicio-4","text":"Confirmamos los cambios y volvemos a comprobar el estado del repositorio:","title":"Ejercicio 4"},{"location":"#ejercicio-5","text":"Modificamos 'indice.txt', mostramos los cambios con respecto a los cambios confirmados anteriormente y confirmamos la nueva versi\u00f3n del archivo:","title":"Ejercicio 5"},{"location":"#ejercicio-6","text":"Ahora mostraremos los cambios sobre la \u00faltima versi\u00f3n del repositorio al completo. Despu\u00e9s modificamos el mensaje de la \u00faltima confirmaci\u00f3n y veremos la \u00faltima modificaci\u00f3n realizada en el repositorio:","title":"Ejercicio 6"},{"location":"#manejo-del-historial-de-cambios","text":"","title":"Manejo del historial de cambios"},{"location":"#ejercicio-1_1","text":"Mostramos el historial de cambios: A\u00f1adimos un nuevo directorio y archivo, movemos el nuevo contenido a la zona de 'stage' y confirmamos los cambios: Volvemos a mostrar el historial de cambios:","title":"Ejercicio 1"},{"location":"#ejercicio-2_1","text":"A\u00f1adimos un nuevo cap\u00edtulo y mostramos las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores:","title":"Ejercicio 2"},{"location":"#ejercicio-3_1","text":"A\u00f1adimos un nuevo cap\u00edtulo y mostramos las diferencias entre la primera y \u00faltima versi\u00f3n del repositorio:","title":"Ejercicio 3"},{"location":"#ejercicio-4_1","text":"Modificamos el archivo 'indice.txt', confirmamos los cambios y mostramos qui\u00e9n ha realizado los cambios sobre el fichero:","title":"Ejercicio 4"},{"location":"#deshacer-cambios","text":"","title":"Deshacer cambios"},{"location":"#ejercicio-1_2","text":"Modificamos 'indice.txt' eliminando contenido y comprobamos el estado del repositorio. Despu\u00e9s deshacemos los cambios y volvemos a comprobar el estado del repositorio:","title":"Ejercicio 1"},{"location":"#ejercicio-2_2","text":"Volvemos a modificar 'indice.txt', a\u00f1adimos los cambios a la zona de 'stage' y comprobamos el estado del repositorio. Despu\u00e9s quitaremos los cambios de la zona de 'stage' y volvemos a comprobar el estado del repositorio. Por \u00faltimo, deshacemos los cambios y comprobamos el estado del repositorio:","title":"Ejercicio 2"},{"location":"#ejercicio-3_2","text":"En primer lugar: Eliminamos la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminamos el fichero capitulos/capitulo3.txt. A\u00f1adir un fichero nuevo capitulos/capitulo4.txt vac\u00edo. A\u00f1adir los cambios a la zona de intercambio temporal. Tras los cambios, comprobamos el estado del repositorio. Despu\u00e9s quitaremos los cambios de la zona de 'stage' y comprobamos el estado. Por \u00faltimo, deshacemos todos los cambios y comprobamos el estado por \u00faltima vez:","title":"Ejercicio 3"},{"location":"#ejercicio-4_2","text":"En primer lugar: Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d Comprobar el historial del repositorio. Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal. En segundo lugar: Comprobar el historial y el estado del repositorio. Volver a hacer el commit con el mismo mensaje de antes. Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio. Comprobar de nuevo el historial y el estado del repositorio.","title":"Ejercicio 4"},{"location":"#gestion-de-ramas","text":"","title":"Gesti\u00f3n de ramas"},{"location":"#ejercicio-1_3","text":"Creamos una nueva rama y mostramos todas las ramas del repositorio:","title":"Ejercicio 1"},{"location":"#ejercicio-2_3","text":"Creamos 'capitulos/capitulo4.txt', confirmamos los cambios y mostramos el historial de todas las ramas:","title":"Ejercicio 2"},{"location":"#ejercicio-3_3","text":"Nos movemos a la rama 'bibliografia', creamos un archivo de texto con el miso nombre y confirmamos los cambios, luego mostramos el historial con todas las ramas:","title":"Ejercicio 3"},{"location":"#ejercicio-4_3","text":"Fusionamos 'bibliografia' con 'main', mostramos el historial, eliminamos 'bibliografia' y volvemos a mostrar el historial:","title":"Ejercicio 4"},{"location":"#ejercicio-5_1","text":"Creamos una nueva rama 'bibliografia', modificamos 'bibliografia.txt' y confirmamos los cambios. Modificamos el mismo archivo en la rama 'main', los confirmamos y fusionamos las ramas resolviendo el conflicto en el fichero: Mostramos el historial del repositorio:","title":"Ejercicio 5"},{"location":"#repositorios-remotos","text":"","title":"Repositorios remotos"},{"location":"#ejercicio-1_4","text":"Creamos un nuevo repositorio en GitHub 'libro-git': Lo a\u00f1adimos al repositorio local y mostramos los repositorios remotos:","title":"Ejercicio 1"},{"location":"#ejercicio-2_4","text":"Subimos los cambios al repositorio remoto con: git push origin main Comprobamos el historial de versiones del repositorio remoto:","title":"Ejercicio 2"}]}